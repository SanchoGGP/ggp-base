;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Hitori.
;;;
;;; Remove cells such that no number appears more than once in the same row or
;;; column.  Removed cells may not be vertically or horizontally adjacent.
;;; Cells which aren't removed must remain connected.
;;;
;;;   (1,1)           (5,1)           (1,1)           (5,1)
;;;        \         /                     \         /     
;;;         5 5 5 2 3                         5   2 3      
;;;         5 4 2 3 2                       5 4 2 3        
;;;         4 5 3 1 2        ------>        4   3 1 2      
;;;         2 3 3 5 3                       2 3   5        
;;;         4 2 5 4 1                         2 5 4 1      
;;;        /         \                     /         \     
;;;   (1,5)           (5,5)           (1,5)           (5,5)
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(role robot)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Base propositions.
;
; - Each cell can be "in" or "out".
; - The in cells can have become "disconnected".
; - The player can have declared that it is "finished".
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (base (cell ?x ?y in))
    (index ?x)
    (index ?y))

(<= (base (cell ?x ?y out))
    (index ?x)
    (index ?y))

(<= (base (last ?x ?y))
    (index ?x)
    (index ?y))

(base finished)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Inputs.
;
; - Each turn consists of removing a node from the board.
; - The player can declare that it is done.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (input robot (remove ?x ?y))
    (index ?x)
    (index ?y))

(input robot done)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Initial state.
;
; - All cells are in.
; - The board isn't disconnected.
; - The match isn't finished.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (init (cell ?x ?y in))
    (index ?x)
    (index ?y))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Legal moves.
;
; A cell can be removed iff...           
;
; - It has not already been removed.
; - No (vertically or horizontally) adjacent cells have been removed.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(legal robot done)

(<= (legal robot (remove ?x1 ?y1))
    (true (cell ?x1 ?y1 in))
    (succ ?x0 ?x1)
    (succ ?x1 ?x2)
    (succ ?y0 ?y1)
    (succ ?y1 ?y2)
    (not (true (cell ?x0 ?y1 out)))
    (not (true (cell ?x2 ?y1 out)))
    (not (true (cell ?x1 ?y0 out)))
    (not (true (cell ?x1 ?y2 out))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Basic next state calculations.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (next (cell ?x ?y out))
    (true (cell ?x ?y out)))

(<= (next (cell ?x ?y out))
    (does robot (remove ?x ?y)))

(<= (next (cell ?x ?y in))
    (true (cell ?x ?y in))
    (does robot (remove ?x2 ?y2))
    (distinct ?x ?x2))

(<= (next (cell ?x ?y in))
    (true (cell ?x ?y in))
    (does robot (remove ?x2 ?y2))
    (distinct ?y ?y2))

(<= (next (cell ?x ?y in))
    (true (cell ?x ?y in))
    (does robot done))

(<= (next finished)
    (does robot done))

(<= (next (last ?x ?y))
    (does robot (remove ?x ?y)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Determine whether the "in" cells are still connected.
;
; It is sufficient to look at the cell just removed and then check that the top
; (i.e. the cell above) is connected to the bottom and the left is connected to
; the right.
;
; - Cells on the top or bottom rows don't need the top-bottom check.
; - Cells on the left or right columns don't need the left-right check.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= disconnected
    (not still_connected))

(<= still_connected
    (true (last ?x1 ?y1))
    (succ ?x0 ?x1)
    (succ ?x1 ?x2)
    (succ ?y0 ?y1)
    (succ ?y1 ?y2)
    (left_right_okay ?x0 ?x2 ?y1)
    (up_down_okay ?x1 ?y0 ?y2))

(<= (left_right_okay ?x0 ?x2 ?y1)
    (connected ?x0 ?y1 ?x2 ?y1))

(<= (left_right_okay 0 2 ?y)
    (index ?y))

(<= (left_right_okay 4 6 ?y)
    (index ?y))

(<= (up_down_okay ?x1 ?y0 ?y2)
    (connected ?x1 ?y0 ?x1 ?y2))

(<= (up_down_okay ?x 0 2)
    (index ?x))

(<= (up_down_okay ?x 4 6)
    (index ?x))

(<= (connected ?x1 ?y1 ?x2 ?y2)
    (adjacent ?x1 ?y1 ?x2 ?y2))

(<= (connected ?x1 ?y1 ?x3 ?y3)
    (true (cell ?x2 ?y2 in))
    (connected ?x1 ?y1 ?x2 ?y2)
    (adjacent ?x2 ?y2 ?x3 ?y3))

(<= (adjacent ?x1 ?y ?x2 ?y)
    (succ ?x1 ?x2)
    (index ?y))

(<= (adjacent ?x1 ?y ?x2 ?y)
    (succ ?x2 ?x1)
    (index ?y))

(<= (adjacent ?x ?y1 ?x ?y2)
    (succ ?y1 ?y2)
    (index ?x))

(<= (adjacent ?x ?y1 ?x ?y2)
    (succ ?y2 ?y1)
    (index ?x))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Terminality.
;
; The match is over when the player says its over.  This is bound to happen
; eventually because, at some point, it will be the only legal move.
;
; Additionally, the match is over if the player disconnects the "in" cells.  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= terminal
    disconnected)

(<= terminal
    (true finished))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Goal.
;
; - If a number appears twice in any row or column, score 0.
; - Otherwise score 100.  (The other requirements are always met because of the
;   legals.)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (goal robot 0)
    (num ?x1 ?y ?n)
    (num ?x2 ?y ?n)
    (distinct ?x1 ?x2)
    (true (cell ?x1 ?y in))
    (true (cell ?x2 ?y in)))

(<= (goal robot 0)
    (num ?x ?y1 ?n)
    (num ?x ?y2 ?n)
    (distinct ?y1 ?y2)
    (true (cell ?x ?y1 in))
    (true (cell ?x ?y2 in)))

(<= (goal robot 0)
    disconnected)

(<= (goal robot 100)
    (not (goal robot 0)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Data specific to this instance of the problem.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(index  1)
(index  2)
(index  3)
(index  4)
(index  5)

(succ  0  1)
(succ  1  2)
(succ  2  3)
(succ  3  4)
(succ  4  5)
(succ  5  6)

(num 1 1 5)
(num 2 1 5)
(num 3 1 5)
(num 4 1 2)
(num 5 1 3)
(num 1 2 5)
(num 2 2 4)
(num 3 2 2)
(num 4 2 3)
(num 5 2 2)
(num 1 3 4)
(num 2 3 5)
(num 3 3 3)
(num 4 3 1)
(num 5 3 2)
(num 1 4 2)
(num 2 4 3)
(num 3 4 3)
(num 4 4 5)
(num 5 4 3)
(num 1 5 4)
(num 2 5 2)
(num 3 5 5)
(num 4 5 4)
(num 5 5 1)
