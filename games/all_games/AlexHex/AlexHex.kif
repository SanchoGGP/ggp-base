(role red)
(role blue)

(init (control red))

(<= (next (control red))
(true (control blue)))
(<= (next (control blue))
(true (control red)))

(<= (legal ?player noop)
(role ?player)
(not (true (control ?player))))

(<= (legal ?player (mark ?x ?y))
(true (control ?player))
(coord ?x)
(coord ?y)
(not (true (cell ?x ?y red)))
(not (true (cell ?x ?y blue))))

(<= (next (cell ?x ?y ?player))
(does ?player (mark ?x ?y)))
(<= (next (cell ?x ?y ?player))
(true (cell ?x ?y ?player)))

(<= (adjacent ?x ?y1 ?x ?y2)
(coord ?x)
(or (succ ?y1 ?y2) (succ ?y2 ?y1)))
(<= (adjacent ?x1 ?y ?x2 ?y)
(coord ?y)
(or (succ ?x1 ?x2) (succ ?x2 ?x1)))
(<= (adjacent ?x1 ?y1 ?x2 ?y2)
(succ ?x1 ?x2)
(succ ?y2 ?y1))
(<= (adjacent ?x1 ?y1 ?x2 ?y2)
(succ ?x2 ?x1)
(succ ?y1 ?y2))

;Calculate which cells are in the path from one side to the other
(<= (redPath 1 ?y)
(true (cell 1 ?y red)))
(<= (redPath ?x2 ?y2)
(true (cell ?x2 ?y2 red))
(adjacent ?x1 ?y1 ?x2 ?y2)
(redPath ?x1 ?y1))
(<= redPathComplete
(redPath 5 ?y))
(<= (bluePath ?x 1)
(true (cell ?x 1 blue)))
(<= (bluePath ?x2 ?y2)
(true (cell ?x2 ?y2 blue))
(adjacent ?x1 ?y1 ?x2 ?y2)
(bluePath ?x1 ?y1))
(<= bluePathComplete
(bluePath ?x 5))

;Terminality and goals
(<= terminal
redPathComplete)
(<= terminal
bluePathComplete)
(<= (goal red 0)
(not redPathComplete))
(<= (goal red 100)
redPathComplete)
(<= (goal blue 0)
(not bluePathComplete))
(<= (goal blue 100)
bluePathComplete)

(coord 1)
(coord 2)
(coord 3)
(coord 4)
(coord 5)
(succ 1 2)
(succ 2 3)
(succ 3 4)
(succ 4 5)

(<= (base (cell ?x ?y ?player))
(coord ?x)
(coord ?y)
(role ?player))
(<= (base (control ?player))
(role ?player))
(<= (input ?player noop)
(role ?player))
(<= (input ?player (mark ?x ?y))
(role ?player)
(coord ?x)
(coord ?y))